syntax = "proto3";

option java_package = "com.bluedragonmc.api.grpc";

import "google/protobuf/empty.proto";
import "common/common_types.proto";
import "server_tracking.proto";

// A service which allows game servers to receive messages from other services.
// All requests originate from other services and end up on a game server.
service GsClientService {
  rpc SendChat(SendChatRequest) returns (google.protobuf.Empty);
  rpc PlaySound(PlaySoundRequest) returns (google.protobuf.Empty);
  rpc StopSound(StopSoundRequest) returns (google.protobuf.Empty);
  rpc CreateInstance(CreateInstanceRequest) returns (CreateInstanceResponse);
  rpc GetInstances(google.protobuf.Empty) returns (GetInstancesResponse);
  rpc EndGame(EndGameRequest) returns (google.protobuf.Empty);
}

message SendChatRequest {

  enum ChatType {
    CHAT = 0;
    ACTION_BAR = 1;
  }

  string player_uuid = 1;
  string message = 2; // MiniMessage formatted, should be escaped if user input is involved
  ChatType chat_type = 3;
}

message PlaySoundRequest {
  string player_uuid = 1;
  string category = 2;
  string sound_id = 3;
  float volume = 4;
  float pitch = 5;
}

message StopSoundRequest {
  string player_uuid = 1;
  string category = 2;
  string sound_id = 3;
}

message CreateInstanceRequest {
  string correlation_id = 1;
  GameType game_type = 2;
}

message CreateInstanceResponse {
  string correlation_id = 1; // Should be the same ID that was received in the CreateInstanceRequest
  bool success = 2;
  GameState game_state = 3; // Included if success == true
  string instance_uuid = 4; // Included if success == true
}

message GetInstancesResponse {

  message RunningInstance {
    string instance_uuid = 1;
    GameType game_type = 2;
    GameState game_state = 3;
    repeated string player_uuids = 4;
  }

  repeated RunningInstance instances = 1;
}

message EndGameRequest {
  string game_id = 1;
  bool queue_players_for_lobby = 2;
}

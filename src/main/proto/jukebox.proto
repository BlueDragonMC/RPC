syntax = "proto3";

option java_package = "com.bluedragonmc.api.grpc";

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "common/common_types.proto";

service Jukebox {
  rpc GetSongInfo(SongInfoRequest) returns (PlayerSongQueue);
  rpc PlaySong(PlaySongRequest) returns (PlaySongResponse);
  rpc RemoveSong(SongRemoveRequest) returns (google.protobuf.Empty);
  rpc StopSong(StopSongRequest) returns (google.protobuf.Empty);
}

message SongInfoRequest {
  string player_uuid = 1;
}

message PlayerSongQueue {
  bool is_playing = 1;
  repeated PlayerSongInfo songs = 2;
}

message PlayerSongInfo {
  string player_uuid = 1;
  optional string song_name = 2;
  optional int32 song_progress_ticks = 3;
  optional int32 song_length_ticks = 4;
  repeated string tags = 5;
}

message PlaySongRequest {
  string player_uuid = 1;
  /* A path to an nbs file, relative to the Jukebox plugin's config folder on the proxy */
  string song_name = 2;
  /* Use -1 for the end of the queue */
  int32 queue_position = 3;
  int32 start_time_ticks = 4;
  /* A list of strings that identify the song; used to batch remove songs */
  repeated string tags = 5;
}

message PlaySongResponse {
  string player_uuid = 1;
  string song_name = 2;
  bool started_playing = 3;
}

message SongRemoveRequest {
  string player_uuid = 1;
  string song_name = 2;
}

message BatchSongRemoveRequest {
  string player_uuid = 1;
  /* If a song has any of the listed tags, it will be removed from the player's queue */
  repeated string match_tags = 2;
}

/* Stops the player's current song, removes it from the queue, and pauses the next song */
message StopSongRequest {
  string player_uuid = 1;
}